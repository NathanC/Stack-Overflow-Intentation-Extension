!function(){function e(e,t,n,r){Object.defineProperty(e,t,{get:n,set:r,enumerable:!0,configurable:!0})}var t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},n={},r={},o=t.parcelRequire2f33;function i(e,t,n,r,o,i,a){try{var s=e[i](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,o)}function a(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function s(e){i(a,r,o,s,c,"next",e)}function c(e){i(a,r,o,s,c,"throw",e)}s(void 0)}))}}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){s(e,t,n[t])}))}return e}function l(e){if(Array.isArray(e))return e}function u(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function f(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function p(e,t){if(e){if("string"==typeof e)return d(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?d(e,t):void 0}}function v(e,t){return l(e)||u(e)||p(e,t)||f()}null==o&&((o=function(e){if(e in n)return n[e].exports;if(e in r){var t=r[e];delete r[e];var o={id:e,exports:{}};return n[e]=o,t.call(o.exports,o,o.exports),o.exports}var i=new Error("Cannot find module '"+e+"'");throw i.code="MODULE_NOT_FOUND",i}).register=function(e,t){r[e]=t},t.parcelRequire2f33=o),o.register("450wW",(function(t,n){var r,o;e(t.exports,"register",(function(){return r}),(function(e){return r=e})),e(t.exports,"resolve",(function(){return o}),(function(e){return o=e}));var i={};r=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)i[t[n]]=e[t[n]]},o=function(e){var t=i[e];if(null==t)throw new Error("Could not resolve bundle with id "+e);return t}})),o.register("fvmlh",(function(e,t){e.exports=o("jnSXm").getBundleURL("fRw3n")+o("450wW").resolve("11Z5m")})),o.register("jnSXm",(function(t,n){var r;e(t.exports,"getBundleURL",(function(){return r}),(function(e){return r=e}));var o={};function i(e){return(""+e).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/.+)\/[^/]+$/,"$1")+"/"}r=function(e){var t=o[e];return t||(t=function(){try{throw new Error}catch(t){var e=(""+t.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^)\n]+/g);if(e)return i(e[2])}return"/"}(),o[e]=t),t}})),o.register("jOY9p",(function(e,t){e.exports=o("jnSXm").getBundleURL("fRw3n")+o("450wW").resolve("jRQnO")})),o("450wW").register(JSON.parse('{"fRw3n":"content_script.efba5fea.js","11Z5m":"textAreaOverlay.047801a6.png","jRQnO":"textAreaOverlayHovered.cb8904ec.png"}'));function b(e,t){var n,r,o,i,a=function(e){return function(t){return s([e,t])}},s=function(a){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(c=0)),c;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return c.label++,{value:a[1],done:!1};case 5:c.label++,r=a[1],a=[0];continue;case 7:a=c.ops.pop(),c.trys.pop();continue;default:if(!(o=c.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){c=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){c.label=a[1];break}if(6===a[0]&&c.label<o[1]){c.label=o[1],o=a;break}if(o&&c.label<o[2]){c.label=o[2],c.ops.push(a);break}o[2]&&c.ops.pop(),c.trys.pop();continue}a=t.call(e,c)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}},c={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i}Object.create;Object.create;var h="undefined"==typeof browser?chrome.storage:browser.storage,m=new WeakMap;function y(e){var t=m.get(e);void 0!==t&&(e.removeEventListener("keydown",t,!0),m.delete(e))}function g(e){return{"aria-description":e.getAttribute("aria-description"),spellcheck:e.getAttribute("spellcheck")}}var w=new Map;function k(e,t){if(e.removeEventListener("click",E),e.removeEventListener("keydown",x),t){h.sync.set({welcomeMessageDismissed:!0})}e.classList.remove("stack-overflow-indentation-plus-plus-welcome-overlay"),function(e){var t=w.get(e);t?(null===t["aria-description"]?e.removeAttribute("aria-description"):e.setAttribute("aria-description",t["aria-description"]),null===t.spellcheck?e.removeAttribute("spellcheck"):e.setAttribute("spellcheck",t.spellcheck)):console.warn("Tried to remove initial attributes from text area, but textarea not found in map")}(e)}function x(e){k(this,!0),this.removeEventListener("click",E)}function E(e){k(this,!0),this.removeEventListener("keydown",x)}document.querySelectorAll("textarea").forEach((function(e){w.set(e,g(e))}));var O=new MutationObserver((function(e){e.forEach((function(e){var t=e.target;if(function(e){return e.nodeType===Node.ELEMENT_NODE}(t)){var n=Array.from(t.querySelectorAll("textarea"));n.forEach((function(e){"comment"===e.name||"Use comments to ask for clarification or add more information. Avoid answering questions in comments."===e.placeholder||e.closest("comment-form")||w.set(e,g(e))})),n.length>0&&A(_)}}))}));function A(e){var t;t={type:"set_active",text:e.functionalityDisabled?"off":"on"},"undefined"==typeof browser?chrome.runtime.sendMessage(t):browser.runtime.sendMessage(t),w.forEach((function(t,n){var r;e.functionalityDisabled?(y(n),k(n,!1),n.classList.remove("stack-exchange-indendation-plus-plus-bordered")):(e.welcomeMessageDismissed?k(n,!1):(n.classList.add("stack-overflow-indentation-plus-plus-welcome-overlay"),n.spellcheck=!1,n.setAttribute("aria-description","Textarea with an overlay welcome message from the Stack Overflow ++ extension. Any keyboard or mouse interaction will permanently dismiss this overlay. Overlay contains an image with text that welcomes you to the extension, instructs you that tabbing will indent one or more lines and shift-tabbing will de-indent, and notes that you can use the extension's toolbar action to change various settings (such as the number of spaces per tab). Interact to dismiss, and I hope you enjoy the extension!"),n.addEventListener("click",E,{once:!0}),n.addEventListener("keydown",x,{once:!0})),null===(r=e.textAreaBorderEnabled)||void 0===r||r?n.classList.add("stack-exchange-indendation-plus-plus-bordered"):n.classList.remove("stack-exchange-indendation-plus-plus-bordered"),function(e){y(e);var t,n=(t=(null==_?void 0:_.numberOfSpacesPerTab)||4,function(e){var n,r,o,i,a=" ".repeat(t),s=0;"Tab"===e.key&&(e.stopPropagation(),e.preventDefault(),r=this.selectionStart,o=this.selectionEnd,n=this.value.substring(r,o),i=this.value,~n.indexOf("\n")?(e.shiftKey?(n=n.split("\n").map((function(e){return e.substr(0,a.length)==a?e.substr(4):e})).join("\n"),this.value=i.substr(0,r)+n+i.substr(o)):(n=n.split("\n").map((function(e){return a+e})).join("\n"),this.value=i.substr(0,r)+n+i.substr(o)),this.selectionStart=r,this.selectionEnd=r+n.length):(e.shiftKey?i.substr(r-a.length,a.length)==a&&(this.value=i.substr(0,r-a.length)+i.substr(o),s=-a.length):(this.value=i.substr(0,r)+a+i.substr(o),s=a.length),this.selectionStart=this.selectionEnd=r+s))});m.set(e,n),e.addEventListener("keydown",n,!0)}(n))}))}var j,S,L=function(e){return"undefined"==typeof browser?e:browser.runtime.getURL(e)},R=L(o("fvmlh")),T=L(o("jOY9p"));j="\n  textarea.stack-overflow-indentation-plus-plus-welcome-overlay, textarea.stack-overflow-indentation-plus-plus-welcome-overlay:focus {\n    background-image: url(".concat(R,"), linear-gradient(to right, #a8c0ff, #3f2b96), url(").concat(T,");\n    color: transparent;\n    background-repeat:no-repeat;\n    background-position: center center;\n    cursor: pointer;\n  }\n  \n  textarea.stack-overflow-indentation-plus-plus-welcome-overlay:hover {\n    background-image: url(").concat(T,"), linear-gradient(to right, #a8c0ff, #3f2b96);\n  } \n"),(S=document.createElement("style")).textContent=j,document.head.append(S);var _={};function M(){return(M=a((function(){var e;return b(this,(function(t){switch(t.label){case 0:return[4,h.sync.get()];case 1:return e=t.sent(),A(_=e),h.onChanged.addListener((function(e,t){if("sync"===t){var n={},r=!0,o=!1,i=void 0;try{for(var a,s=Object.entries(e)[Symbol.iterator]();!(r=(a=s.next()).done);r=!0){var l=v(a.value,2),u=l[0],f=l[1];n[u]=f.newValue}}catch(e){o=!0,i=e}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}A(_=c({},_,n))}})),O.observe(document.body,{childList:!0,subtree:!0}),[2]}}))}))).apply(this,arguments)}!function(){M.apply(this,arguments)}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
