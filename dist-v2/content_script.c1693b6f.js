!function(){function e(e,t,n,r){Object.defineProperty(e,t,{get:n,set:r,enumerable:!0,configurable:!0})}function t(e){return e&&e.__esModule?e.default:e}var n="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},r={},o={},i=n.parcelRequire2f33;null==i&&((i=function(e){if(e in r)return r[e].exports;if(e in o){var t=o[e];delete o[e];var n={id:e,exports:{}};return r[e]=n,t.call(n.exports,n,n.exports),n.exports}var i=new Error("Cannot find module '"+e+"'");throw i.code="MODULE_NOT_FOUND",i}).register=function(e,t){o[e]=t},n.parcelRequire2f33=i),i.register("450wW",(function(t,n){var r,o;e(t.exports,"register",(function(){return r}),(function(e){return r=e})),e(t.exports,"resolve",(function(){return o}),(function(e){return o=e}));var i={};r=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)i[t[n]]=e[t[n]]},o=function(e){var t=i[e];if(null==t)throw new Error("Could not resolve bundle with id "+e);return t}})),i.register("6y9qn",(function(e,t){e.exports=i("jnSXm").getBundleURL("9hkNq")+i("450wW").resolve("87JfB")})),i.register("jnSXm",(function(t,n){var r;e(t.exports,"getBundleURL",(function(){return r}),(function(e){return r=e}));var o={};function i(e){return(""+e).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/.+)\/[^/]+$/,"$1")+"/"}r=function(e){var t=o[e];return t||(t=function(){try{throw new Error}catch(t){var e=(""+t.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\/\/[^)\n]+/g);if(e)return i(e[2])}return"/"}(),o[e]=t),t}})),i.register("h8MQ8",(function(e,t){e.exports=i("jnSXm").getBundleURL("9hkNq")+i("450wW").resolve("jH34l")})),i("450wW").register(JSON.parse('{"9hkNq":"content_script.c1693b6f.js","87JfB":"textAreaOverlay.047801a6.png","jH34l":"textAreaOverlayHovered.cb8904ec.png","h2B7w":"content_script.a034b753.js"}'));var s=i("bJuUF"),a=i("7l6ej"),c=i("7Fme4"),l=i("7UjPA");var u=i("7s9HL");console.log("very start of content script");var f=new WeakMap;function d(e){var t=f.get(e);void 0!==t&&(e.removeEventListener("keydown",t,!0),f.delete(e))}function p(e){return{"aria-description":e.getAttribute("aria-description"),spellcheck:e.getAttribute("spellcheck")}}var v=new Map;function h(e,t){if(e.removeEventListener("click",b),e.removeEventListener("keydown",m),t){u.compatibleStorage.sync.set({welcomeMessageDismissed:!0})}e.classList.remove("stack-overflow-indentation-plus-plus-welcome-overlay"),function(e){var t=v.get(e);t?(null===t["aria-description"]?e.removeAttribute("aria-description"):e.setAttribute("aria-description",t["aria-description"]),null===t.spellcheck?e.removeAttribute("spellcheck"):e.setAttribute("spellcheck",t.spellcheck)):console.warn("Tried to remove initial attributes from text area, but textarea not found in map")}(e)}function m(e){h(this,!0),this.removeEventListener("click",b)}function b(e){h(this,!0),this.removeEventListener("keydown",m)}document.querySelectorAll("textarea").forEach((function(e){v.set(e,p(e))}));var g=new MutationObserver((function(e){e.forEach((function(e){var t=e.target;if(function(e){return e.nodeType===Node.ELEMENT_NODE}(t)){var n=Array.from(t.querySelectorAll("textarea"));n.forEach((function(e){"comment"===e.name||"Use comments to ask for clarification or add more information. Avoid answering questions in comments."===e.placeholder||e.closest("comment-form")||v.set(e,p(e))})),n.length>0&&y(A)}}))}));function y(e){var t;t={type:"set_active",text:e.functionalityDisabled?"off":"on"},"undefined"==typeof browser?chrome.runtime.sendMessage(t):browser.runtime.sendMessage(t),v.forEach((function(t,n){var r;e.functionalityDisabled?(d(n),h(n,!1),n.classList.remove("stack-exchange-indendation-plus-plus-bordered")):(e.welcomeMessageDismissed?h(n,!1):(n.classList.add("stack-overflow-indentation-plus-plus-welcome-overlay"),n.spellcheck=!1,n.setAttribute("aria-description","Textarea with an overlay welcome message from the Stack Overflow ++ extension. Any keyboard or mouse interaction will permanently dismiss this overlay. Overlay contains an image with text that welcomes you to the extension, instructs you that tabbing will indent one or more lines and shift-tabbing will de-indent, and notes that you can use the extension's toolbar action to change various settings (such as the number of spaces per tab). Interact to dismiss, and I hope you enjoy the extension!"),n.addEventListener("click",b,{once:!0}),n.addEventListener("keydown",m,{once:!0})),null===(r=e.textAreaBorderEnabled)||void 0===r||r?n.classList.add("stack-exchange-indendation-plus-plus-bordered"):n.classList.remove("stack-exchange-indendation-plus-plus-bordered"),function(e){d(e);var t,n=(t=(null==A?void 0:A.numberOfSpacesPerTab)||4,function(e){var n,r,o,i,s=" ".repeat(t),a=0;"Tab"===e.key&&(e.stopPropagation(),e.preventDefault(),r=this.selectionStart,o=this.selectionEnd,n=this.value.substring(r,o),i=this.value,~n.indexOf("\n")?(e.shiftKey?(n=n.split("\n").map((function(e){return e.substr(0,s.length)==s?e.substr(4):e})).join("\n"),this.value=i.substr(0,r)+n+i.substr(o)):(n=n.split("\n").map((function(e){return s+e})).join("\n"),this.value=i.substr(0,r)+n+i.substr(o)),this.selectionStart=r,this.selectionEnd=r+n.length):(e.shiftKey?i.substr(r-s.length,s.length)==s&&(this.value=i.substr(0,r-s.length)+i.substr(o),a=-s.length):(this.value=i.substr(0,r)+s+i.substr(o),a=s.length),this.selectionStart=this.selectionEnd=r+a))});f.set(e,n),e.addEventListener("keydown",n,!0)}(n))}))}var w,k,x=function(e){return"undefined"==typeof browser?e:browser.runtime.getURL(e)},E=x(i("6y9qn")),L=x(i("h8MQ8"));w="\n  textarea.stack-overflow-indentation-plus-plus-welcome-overlay, textarea.stack-overflow-indentation-plus-plus-welcome-overlay:focus {\n    background-image: url(".concat(E,"), linear-gradient(to right, #a8c0ff, #3f2b96), url(").concat(L,");\n    color: transparent;\n    background-repeat:no-repeat;\n    background-position: center center;\n    cursor: pointer;\n  }\n  \n  textarea.stack-overflow-indentation-plus-plus-welcome-overlay:hover {\n    background-image: url(").concat(L,"), linear-gradient(to right, #a8c0ff, #3f2b96);\n  } \n"),(k=document.createElement("style")).textContent=w,document.head.append(k);var A={};function S(){return(S=(0,s.default)(t(l).mark((function e(){var n;return t(l).wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,u.compatibleStorage.sync.get();case 2:n=e.sent,A=n,console.log("setting up.. ",n),y(A),u.compatibleStorage.onChanged.addListener((function(e,t){if("sync"===t){var n={},r=!0,o=!1,i=void 0;try{for(var s,l=Object.entries(e)[Symbol.iterator]();!(r=(s=l.next()).done);r=!0){var u=(0,c.default)(s.value,2),f=u[0],d=u[1];n[f]=d.newValue}}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}y(A=(0,a.default)({},A,n))}})),g.observe(document.body,{childList:!0,subtree:!0});case 8:case"end":return e.stop()}}),e)})))).apply(this,arguments)}console.log("about to setup.."),function(){S.apply(this,arguments)}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
