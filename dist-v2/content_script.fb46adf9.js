!function(){function e(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function t(t){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{},o=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),o.forEach((function(n){e(t,n,r[n])}))}return t}function n(e){if(Array.isArray(e))return e}function r(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function o(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function s(e,t){if(e){if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(e,t):void 0}}function a(e,t){return n(e)||r(e)||s(e,t)||o()}var u="undefined"==typeof browser?chrome.storage:browser.storage,l=new WeakMap;function c(e){var t=l.get(e);void 0!==t&&(e.removeEventListener("keydown",t,!0),l.delete(e))}var f=document.querySelectorAll("textarea");function d(e){var t;t={type:"set_active",text:e.functionalityDisabled?"off":"on"},"undefined"==typeof browser?chrome.runtime.sendMessage(t):browser.runtime.sendMessage(t),f.forEach((function(t){var n;e.functionalityDisabled?(c(t),t.classList.remove("stack-exchange-indendation-plus-plus-bordered")):(null===(n=e.textAreaBorderEnabled)||void 0===n||n?t.classList.add("stack-exchange-indendation-plus-plus-bordered"):t.classList.remove("stack-exchange-indendation-plus-plus-bordered"),function(e){c(e);var t,n=(t=(null==b?void 0:b.numberOfSpacesPerTab)||4,function(e){var n,r,o,i,s=" ".repeat(t),a=0;"Tab"===e.key&&(e.stopPropagation(),e.preventDefault(),r=this.selectionStart,o=this.selectionEnd,n=this.value.substring(r,o),i=this.value,~n.indexOf("\n")?(e.shiftKey?(n=n.split("\n").map((function(e){return e.substr(0,s.length)==s?e.substr(4):e})).join("\n"),this.value=i.substr(0,r)+n+i.substr(o)):(n=n.split("\n").map((function(e){return s+e})).join("\n"),this.value=i.substr(0,r)+n+i.substr(o)),this.selectionStart=r,this.selectionEnd=r+n.length):(e.shiftKey?i.substr(r-s.length,s.length)==s&&(this.value=i.substr(0,r-s.length)+i.substr(o),a=-s.length):(this.value=i.substr(0,r)+s+i.substr(o),a=s.length),this.selectionStart=this.selectionEnd=r+a))});l.set(e,n),e.addEventListener("keydown",n,!0)}(t))}))}var b=void 0;u.sync.get().then((function(e){d(b=e)})),u.onChanged.addListener((function(e,n){if("sync"===n){var r={},o=!0,i=!1,s=void 0;try{for(var u,l=Object.entries(e)[Symbol.iterator]();!(o=(u=l.next()).done);o=!0){var c=a(u.value,2),f=c[0],y=c[1];r[f]=y.newValue}}catch(e){i=!0,s=e}finally{try{o||null==l.return||l.return()}finally{if(i)throw s}}d(b=t({},b,r))}}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
